---
  - name: Provision an EC2 Instance
    hosts: all
    connection: local
    gather_facts: False
    tags: provisioning

 # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      instance_type: t2.medium
      security_group: cakesolution
      image: ami-30d3a65f
      keypair: elk-book-stack
      region: ap-south-1
      subnet_id: subnet-b79229de
      count: 1 

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        ec2_group:
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 5601
              to_port: 5601
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 8081
              to_port: 8081
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      - name: Launch the new EC2 Instance
        ec2: 
           group: "{{ security_group }}" 
           instance_type: "{{ instance_type}}" 
           image: "{{ image }}"  
           region: "{{ region }}"
           vpc_subnet_id: "{{ subnet_id }}"
           assign_public_ip: yes 
           keypair: "{{ keypair }}"
           instance_tags:
              Name: elk-wordpress
           exact_count: 1
           count_tag:
              Name: elk-wordpress
           wait: true
        register: ec2
  
      - name: Add new instance to host group
        lineinfile:
          destfile: "/opt/cakesln/docker-compose-elk/hosts"
          regexp: '^[ec2] '
          insertafter: EOF
          line: "{{ item.public_ip }}"     
        with_items: "{{ ec2.instances }}"

      - name: Wait for SSH to come up
        wait_for:
          host: "{{ item.public_dns_name }}"
          port: 22
          delay: 60
          timeout: 320
          state: started
        with_items: "{{ ec2.instances }}"
